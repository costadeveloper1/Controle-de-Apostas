import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { Routes, Route, NavLink, useLocation } from 'react-router-dom';
import { Plus, TrendingUp, BarChart3, Target, Instagram, Linkedin, Mail, Twitter, TrendingDown, HelpCircle } from 'lucide-react';

import AddBetForm from './components/AddBetForm';
import Principal from './components/Principal';
import ReportsPage from './components/ReportsPage';
import StatsCard from './components/StatsCard';

const BettingTracker = () => {
  const location = useLocation();
  const [bets, setBets] = useState(() => {
    const savedBets = localStorage.getItem('bets');
    try {
      return savedBets ? JSON.parse(savedBets) : [];
    } catch (error) {
      console.error("Erro ao parsear apostas do localStorage:", error);
      return [];
    }
  });

  const [activeFilter, setActiveFilter] = useState('Over 0.5');

  useEffect(() => {
    if (location.pathname === '/') {
      setActiveFilter('Over 0.5');
    }
  }, [location.pathname]);

  useEffect(() => {
    // Rotina de limpeza para remover duplicados existentes e normalizar categorias
    const seenIds = new Set();
    const uniqueBets = [];
    let needsUpdate = false;

    for (const bet of bets) {
      if (bet.id && !seenIds.has(bet.id)) {
        seenIds.add(bet.id);
        let updatedBet = { ...bet };
        
        // Normalização de categorias
        if (updatedBet.marketCategory) {
          const originalCategory = updatedBet.marketCategory;
          let newCategory = originalCategory.trim();
          if (newCategory.startsWith('0-10')) {
            newCategory = '0-10';
          }
          if (newCategory !== originalCategory) {
            updatedBet.marketCategory = newCategory;
            needsUpdate = true;
          }
        }
        uniqueBets.push(updatedBet);
      } else {
        needsUpdate = true; // Encontrou um duplicado ou aposta sem ID, precisa de atualização
      }
    }

    if (needsUpdate) {
      setBets(uniqueBets);
    }
  }, []); // Executa apenas uma vez para limpar os dados iniciais

  useEffect(() => {
    localStorage.setItem('bets', JSON.stringify(bets));
  }, [bets]);

  const marketCategoriesToShow = useMemo(() => {
    return ["Over 0.5", "0-10", "Asiáticos HT", "Over 1.5"];
  }, []);

  useEffect(() => {
    const needsUpdate = bets.some(
      (bet) => (bet.marketCategory && bet.marketCategory.startsWith('0-10') && bet.marketCategory !== '0-10') || bet.marketCategory === 'Minutos'
    );
  
    if (needsUpdate) {
      const updatedBets = bets.map((bet) => {
        if (bet.marketCategory && bet.marketCategory.startsWith('0-10')) {
          return { ...bet, marketCategory: '0-10' };
        }
        if (bet.marketCategory === 'Minutos') {
          // Os mercados de minutos que não são "0-10" serão mapeados para "Over 0.5" se a seleção for "Mais de 0.0"
          if(bet.selection === 'Mais de 0.0') {
            return { ...bet, marketCategory: 'Over 0.5' };
          }
          const { marketCategory, ...rest } = bet;
          return rest;
        }
        return bet;
      });
      setBets(updatedBets);
    }
  }, [bets]);

  const [showAddForm, setShowAddForm] = useState(false);
  const [editingBet, setEditingBet] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [importFeedback, setImportFeedback] = useState({ type: '', message: '' });
  
  const initialFormData = useMemo(() => ({
    date: new Date().toISOString().split('T')[0],
    championship: '',
    homeTeam: '',
    awayTeam: '',
    marketMinutes: '',
    odd: '',
    result: '',
    stake: 100
  }), []);

  const [formData, setFormData] = useState(initialFormData);

  const timeIntervals = useMemo(() => [
    '0-9:59', '10-19:59', '20-29:59', '30-39:59', '40-49:59',
    '50-59:59', '60-69:59', '70-79:59', '80-fim'
  ], []);

  const uniqueChampionships = useMemo(() => {
    const allChampionships = bets.map(bet => bet.championship).filter(Boolean);
    return Array.from(new Set(allChampionships)).sort();
  }, [bets]);

  useEffect(() => {
    if (editingBet) {
      setFormData({
        date: editingBet.date,
        championship: editingBet.championship,
        homeTeam: editingBet.homeTeam,
        awayTeam: editingBet.awayTeam,
        marketMinutes: editingBet.marketMinutes,
        odd: String(editingBet.odd).replace('.', ','), 
        result: editingBet.result || (editingBet.status === 'won' ? 'Ganha' : editingBet.status === 'lost' ? 'Perdida' : editingBet.status === 'void' ? 'Devolvida' : editingBet.status === 'cashed_out' ? 'Cashout' : ''),
        stake: editingBet.stake
      });
      setShowAddForm(true);
    } else {
      setFormData(initialFormData);
    }
  }, [editingBet, initialFormData]);

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const calculateProfit = (odd, result, stake) => {
    const numericOdd = parseFloat(String(odd).replace(',', '.'));
    const numericStake = parseFloat(stake);

    if (result === 'green' || result === 'Ganha') {
      return (numericOdd - 1) * numericStake;
    } else if (result === 'red' || result === 'Perdida') {
      return -numericStake;
    } else if (result === 'Devolvida' || result === 'Cashout' || result === 'void') {
      return 0;
    }
    return 0;
  };

  const handleSubmit = () => {
    if (!formData.homeTeam || !formData.awayTeam || !formData.marketMinutes || !formData.odd || !formData.result || !formData.championship || !formData.stake) {
      alert('Preencha todos os campos obrigatórios: Data, Campeonato, Time da Casa, Time Visitante, Intervalo de Minutos, Odd, Resultado e Entrada!');
      return;
    }

    const profit = calculateProfit(formData.odd, formData.result, formData.stake);
    
    const betData = {
      date: formData.date,
      championship: formData.championship,
      homeTeam: formData.homeTeam,
      awayTeam: formData.awayTeam,
      marketMinutes: formData.marketMinutes,
      odd: parseFloat(String(formData.odd).replace(',', '.')),
      result: formData.result,
      stake: parseFloat(formData.stake),
      profit: profit,
    };

    if (editingBet) {
      setBets(prevBets => prevBets.map(b => b.id === editingBet.id ? { ...b, ...betData, id: editingBet.id, timestamp: editingBet.timestamp || new Date().toISOString() } : b));
      setEditingBet(null);
      alert('Aposta atualizada com sucesso!');
    } else {
      const newBet = {
        ...betData,
        id: Date.now().toString(),
        timestamp: new Date().toISOString()
      };
      setBets(prev => [newBet, ...prev]);
      alert('Aposta adicionada com sucesso!');
    }
    
    setFormData(initialFormData);
    setShowAddForm(false);
  };

  const handleOpenAddForm = () => {
    setEditingBet(null);
    setFormData(initialFormData);
    setShowAddForm(true);
  };

  const handleEditBet = (betToEdit) => {
    setEditingBet(betToEdit);
  };

  const handleDeleteBet = (betId) => {
    setBets(prevBets => prevBets.filter(bet => bet.id !== betId));
    alert('Aposta excluída com sucesso!');
  };

  const stats = useMemo(() => {
    const totalBets = bets.length;
    const greenBetsList = bets.filter(bet => bet.status === 'won' || bet.result === 'green' || bet.result === 'Ganha');
    const greenBetsCount = greenBetsList.length;
    const redBetsCount = bets.filter(bet => bet.status === 'lost' || bet.result === 'red' || bet.result === 'Perdida').length;
    
    const relevantBetsForWinRate = bets.filter(bet => 
        (bet.status === 'won' || bet.result === 'green' || bet.result === 'Ganha') || 
        (bet.status === 'lost' || bet.result === 'red' || bet.result === 'Perdida')
    ).length;

    const totalProfit = bets.reduce((sum, bet) => sum + (bet.profit || 0), 0);
    const winRate = relevantBetsForWinRate > 0 ? (greenBetsCount / relevantBetsForWinRate * 100) : 0;
    
    const greenBetsOddsSum = greenBetsList.reduce((sum, bet) => sum + (parseFloat(String(bet.odd).replace(',', '.')) || 0), 0);
    const averageOdd = greenBetsCount > 0 ? (greenBetsOddsSum / greenBetsCount) : 0;

    const totalInvestido = bets.reduce((sum, bet) => sum + (parseFloat(String(bet.stake).replace(',', '.')) || 0), 0);
    const roi = totalInvestido > 0 ? (totalProfit / totalInvestido * 100) : 0;

    return {
      totalProfit: totalProfit,
      totalBets: totalBets,
      greenBets: greenBetsCount,
      redBets: redBetsCount, 
      winRate: winRate,
      averageOdd: averageOdd,
      totalInvestido: totalInvestido,
      roi: roi
    };
  }, [bets]);

  const handleFilterChange = (filter) => {
    setActiveFilter(currentFilter => (currentFilter === filter ? 'Todos' : filter));
  };

  const addOrUpdateBet = (bet) => {
    setBets(prevBets => {
      const existingIds = new Set(prevBets.map(b => b.id));
      const newBetsToAdd = [bet].filter(b => !existingIds.has(b.id));
      if (newBetsToAdd.length > 0) {
        return [...newBetsToAdd, ...prevBets];
      }
      return prevBets;
    });
  };

  const uniqueMarketCategories = useMemo(() => {
    return marketCategoriesToShow;
  }, [marketCategoriesToShow]);

  const todayBetsCount = useMemo(() => {
    const today = new Date().toISOString().split('T')[0];
    return bets.filter(bet => bet.date === today).length;
  }, [bets]);

  const parseBet365HTML = async (htmlString, selectedDateForImport) => {
    try {
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlString, "text/html");
        const betElements = doc.querySelectorAll('.myb-SettledBetItem');
        const parsedBetsPromises = []; 

        console.log("Total de elementos .myb-SettledBetItem encontrados:", betElements.length);

        for (let i = 0; i < betElements.length; i++) {
            const item = betElements[i];
            
            if (item.textContent && item.textContent.includes("Reembolso(Push)")) {
                continue; 
            }
            
            const marketDescriptionEl = item.querySelector('.myb-BetParticipant_MarketDescription');
            let marketDescriptionText = marketDescriptionEl ? marketDescriptionEl.textContent.trim() : '';

            if (marketDescriptionText) {
              const unwantedPattern = /Número de Cartões aos \d+ Minutos/gi;
              marketDescriptionText = marketDescriptionText.replace(unwantedPattern, '').trim();
              marketDescriptionText = marketDescriptionText.replace(/\s{2,}/g, ' ').trim();
              marketDescriptionText = marketDescriptionText.split('\n').map(line => line.trim()).filter(line => line).join(' ');
            }

            let marketMinutes = "Não especificado"; 
            let marketCategory = 'Outros';
            const marketDescriptionLower = marketDescriptionText.toLowerCase();

            if (marketDescriptionLower.includes("10 minutos - escanteios - 3 opções")) {
                marketMinutes = "0-10";
                marketCategory = "0-10";
            } else if (marketDescriptionLower.includes("1º tempo") && marketDescriptionLower.includes("escanteios asiáticos")) {
                marketMinutes = "40-Int";
                marketCategory = "Asiáticos HT";
            } else if (marketDescriptionLower.includes("primeiro tempo") && marketDescriptionLower.includes("escanteios asiáticos")) {
                marketMinutes = "40-Int";
                marketCategory = "Asiáticos HT";
            } else if (marketDescriptionLower.includes("total de escanteios")) {
                marketMinutes = "80-Fim";
                marketCategory = "Asiáticos FT";
            } else if (marketDescriptionLower.includes("escanteios asiáticos") && 
                       !marketDescriptionLower.includes("1º tempo") && 
                       !marketDescriptionLower.includes("primeiro tempo")) {
                marketMinutes = "80-Fim";
                marketCategory = "Asiáticos FT";
            }
            
            if (marketMinutes === "Não especificado") {
                const subHeaderTextEl = item.querySelector('.myb-SettledBetItemHeader_SubHeaderText');
                if (subHeaderTextEl) {
                    const subHeaderText = subHeaderTextEl.textContent.trim();
                    const matchMinute = subHeaderText.match(/(\d{1,2}:\d{2}\s*-\s*\d{1,2}:\d{2})/);
                    if (matchMinute && matchMinute[1]) {
                        marketMinutes = matchMinute[1].replace(/\s+/g, '');
                        marketCategory = 'Minutos';
                    }
                } else {
                    const participantSpanEl = item.querySelector('.myb-BetParticipant_ParticipantSpan');
                    if (participantSpanEl) {
                        const participantSpanText = participantSpanEl.textContent.trim();
                        const matchMinute = participantSpanText.match(/(\d{1,2}:\d{2}\s*-\s*\d{1,2}:\d{2})/);
                        if (matchMinute && matchMinute[1]) {
                            marketMinutes = matchMinute[1].replace(/\s+/g, '');
                            marketCategory = 'Minutos';
                        }
                    }
                }
            }

            const selectionEl = item.querySelector('.myb-SettledBetItemHeader_SubHeaderText');
            const selection = selectionEl ? selectionEl.textContent.trim() : "Seleção não encontrada";

            if (marketCategory === 'Minutos' && selection === 'Mais de 0.0') {
              marketCategory = 'Over 0.5';
            } else if (marketCategory === 'Minutos' && selection === 'Mais de 1.0') {
              marketCategory = 'Over 1.5';
            }
            
            if (marketMinutes === "Não especificado" && !marketDescriptionLower.includes("mais de") && !marketDescriptionLower.includes("menos de")) {
                 continue; 
            }

            const stakeEl = item.querySelector('.myb-SettledBetItemHeader_Text');
            const oddEl = item.querySelector('.myb-BetParticipant_HeaderOdds');
            const team1NameEl = item.querySelector('.myb-BetParticipant_Team1Name');
            const team2NameEl = item.querySelector('.myb-BetParticipant_Team2Name');
            const winLossIndicator = item.querySelector('.myb-WinLossIndicator');
            const returnAmountEl = item.querySelector('.myb-SettledBetItemFooter_BetInformationText');

            const stakeText = stakeEl ? stakeEl.textContent.trim() : '0';
            let stakeValue = 0;
            const stakeMatch = stakeText.match(/[\d,.]+/);
            if (stakeMatch && stakeMatch[0]) {
                stakeValue = parseFloat(stakeMatch[0].replace(/\./g, '').replace(',', '.'));
            }

            const homeTeam = team1NameEl ? team1NameEl.textContent.trim() : "Time Casa não encontrado";
            const awayTeam = team2NameEl ? team2NameEl.textContent.trim() : "Time Visitante não encontrado";
            const oddText = oddEl ? oddEl.textContent.trim() : '0';
            const oddValue = parseFloat(oddText.replace(',', '.')) || 0;

            let returnValue = 0;
            if (returnAmountEl) {
                const returnText = returnAmountEl.textContent.trim();
                const returnMatch = returnText.match(/[\d,.]+/);
                if (returnMatch && returnMatch[0]) {
                    returnValue = parseFloat(returnMatch[0].replace(/\./g, '').replace(',', '.'));
                }
            }

            let finalOdd = oddValue;
            let internalStatus = 'pending';
            let profit = 0;

            if (winLossIndicator) {
                if (winLossIndicator.classList.contains('myb-WinLossIndicator-won')) {
                    internalStatus = 'won'; profit = returnValue - stakeValue;
                } else if (winLossIndicator.classList.contains('myb-WinLossIndicator-lost')) {
                    internalStatus = 'lost'; profit = -stakeValue;
                } else if (winLossIndicator.classList.contains('myb-WinLossIndicator-void')) {
                    internalStatus = 'void'; profit = 0; finalOdd = 1.0;
                } else if (winLossIndicator.classList.contains('myb-WinLossIndicator-cashout')) {
                    internalStatus = 'cashed_out'; profit = returnValue - stakeValue;
                    if (profit > 0 && stakeValue > 0) finalOdd = (profit / stakeValue) + 1;
                    else if (profit === 0) finalOdd = 1.0;
                } else {
                    const statusLabelEl = item.querySelector('.myb-SettledBetItem_BetStateLabel');
                    const statusText = statusLabelEl ? statusLabelEl.textContent.trim().toLowerCase() : '';
                    if (statusText.includes('ganha')) { internalStatus = 'won'; profit = returnValue - stakeValue; }
                    else if (statusText.includes('perdida')) { internalStatus = 'lost'; profit = -stakeValue; }
                    else if (statusText.includes('devolvida')) { internalStatus = 'void'; profit = 0; finalOdd = 1.0; }
                    else if (statusText.includes('encerrada')) { internalStatus = 'cashed_out'; profit = returnValue - stakeValue;
                        if (profit > 0 && stakeValue > 0) finalOdd = (profit / stakeValue) + 1;
                        else if (profit === 0) finalOdd = 1.0;
                    }
                }
            } else {
                const statusLabelEl = item.querySelector('.myb-SettledBetItem_BetStateLabel');
                if (statusLabelEl) {
                    const statusText = statusLabelEl.textContent.trim().toLowerCase();
                    if (statusText.includes('ganha')) { internalStatus = 'won'; profit = returnValue - stakeValue; }
                    else if (statusText.includes('perdida')) { internalStatus = 'lost'; profit = -stakeValue; }
                    else if (statusText.includes('devolvida')) { internalStatus = 'void'; profit = 0; finalOdd = 1.0; }
                    else if (statusText.includes('encerrada')) { internalStatus = 'cashed_out'; profit = returnValue - stakeValue;
                        if (profit > 0 && stakeValue > 0) finalOdd = (profit / stakeValue) + 1;
                        else if (profit === 0) finalOdd = 1.0;
                    }
                } else {
                }
            }
            
            const betDate = selectedDateForImport;

            let championship = "Aguardando busca...";
            if (homeTeam.toLowerCase().includes("flamengo") || awayTeam.toLowerCase().includes("flamengo")) championship = "Brasileirão Série A (Simulado)";
            else if (homeTeam.toLowerCase().includes("real madrid") || awayTeam.toLowerCase().includes("real madrid")) championship = "La Liga (Simulado)";
            else if (homeTeam.toLowerCase().includes("manchester city") || awayTeam.toLowerCase().includes("manchester city")) championship = "Premier League (Simulado)";
            else championship = "Campeonato Genérico (Simulado)";

            const bet = {
                id: `${betDate}-${homeTeam}-${awayTeam}-${marketMinutes}-${selection}-${stakeValue}`.replace(/\s+/g, '-').toLowerCase(),
                date: betDate,
                championship: championship,
                homeTeam: homeTeam,
                awayTeam: awayTeam,
                market: marketDescriptionText,
                marketCategory: marketCategory,
                marketMinutes: marketMinutes,
                stake: stakeValue,
                odd: parseFloat(finalOdd.toFixed(4)),
                status: internalStatus, 
                profit: parseFloat(profit.toFixed(2)),
                selection: selection,
            };
            
            if (stakeValue > 0 && finalOdd > 0 && homeTeam !== "Time Casa não encontrado" && marketMinutes !== "Não especificado") {
                parsedBetsPromises.push(Promise.resolve(bet));
            } else {
            }
        } 

        const parsedBets = await Promise.all(parsedBetsPromises);
        if (parsedBets.length === 0) {
            console.log("Nenhuma aposta válida foi encontrada no HTML.");
        }
        return parsedBets;

    } catch (error) {
        console.error("Erro ao processar o HTML da Bet365:", error);
        return [];
    }
  };

  const clearImportFeedback = useCallback(() => {
    setImportFeedback({ type: '', message: '' });
  }, [setImportFeedback]); 

  const handleDeleteBetsByDate = useCallback((dateToDelete) => {
    if (!dateToDelete) {
      setImportFeedback({ type: 'error', message: 'Nenhuma data selecionada para exclusão.' });
      return;
    }
    const confirmDelete = window.confirm(`Tem certeza que deseja excluir TODAS as apostas do dia ${new Date(dateToDelete + 'T00:00:00').toLocaleDateString('pt-BR')}?`);
    if (confirmDelete) {
      const actualDeletedCount = bets.filter(bet => bet.date === dateToDelete).length;
      setBets(prevBets => prevBets.filter(bet => bet.date !== dateToDelete));
      if (actualDeletedCount > 0) {
        setImportFeedback({ type: 'success', message: `${actualDeletedCount} aposta(s) do dia ${new Date(dateToDelete + 'T00:00:00').toLocaleDateString('pt-BR')} foram excluídas.` });
      } else {
        setImportFeedback({ type: 'info', message: `Nenhuma aposta encontrada para o dia ${new Date(dateToDelete + 'T00:00:00').toLocaleDateString('pt-BR')} para excluir.` });
      }
    } else {
      setImportFeedback({ type: 'info', message: 'Exclusão cancelada.' });
    }
  }, [bets, setBets, setImportFeedback]);

  const handleFileUpload = async (file, selectedDateForImport) => {
    clearImportFeedback();
    if (!selectedDateForImport) {
      setImportFeedback({ type: 'error', message: 'Por favor, selecione uma data para a importação.' });
      return;
    }
    if (!file) {
      setImportFeedback({ type: 'error', message: 'Por favor, selecione um arquivo HTML válido.' });
      return;
    }
    setIsLoading(true);
    try {
      const htmlString = await new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (event) => resolve(event.target.result);
        reader.onerror = (error) => reject(error);
        reader.readAsText(file);
      });
      const newBets = await parseBet365HTML(htmlString, selectedDateForImport);
      
      let addedCount = 0;
      setBets(currentBets => {
          const currentBetIds = new Set(currentBets.map(b => b.id));
          const betsToAdd = newBets.filter(b => b.id && !currentBetIds.has(b.id));
          addedCount = betsToAdd.length;
          return [...currentBets, ...betsToAdd];
      });

      if (addedCount > 0) {
        setImportFeedback({ type: 'success', message: `${addedCount} de ${newBets.length} apostas foram importadas com sucesso para o dia ${new Date(selectedDateForImport + 'T00:00:00').toLocaleDateString('pt-BR')}!` });
      } else {
        setImportFeedback({ type: 'info', message: 'Nenhuma aposta nova encontrada para importação.' });
      }
    } catch (error) {
      console.error("Erro em handleFileUpload:", error);
      setImportFeedback({ type: 'error', message: `Erro ao processar o arquivo: ${error.message}` });
    } finally {
      setIsLoading(false);
    }
  };

  let profitIcon;
  let profitIconColor = 'text-gray-400';
  if (stats.totalProfit > 0) {
    profitIcon = <TrendingUp />; profitIconColor = 'text-green-500';
  } else if (stats.totalProfit < 0) {
    profitIcon = <TrendingDown />; profitIconColor = 'text-red-500';
  } else { 
    profitIcon = <TrendingUp />;
  }

  const roiTooltipText = "ROI (Retorno Sobre o Investimento) mede o lucro ou prejuízo de um investimento em relação ao custo.";
  const dashboardLinkPath = "/";
  const reportsLinkPath = "/reports";

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 flex flex-col">
      <div className="bg-gray-200 shadow-md w-full border-b border-gray-300 py-4">
        <div className="max-w-full mx-auto px-4">
          <div className="flex flex-col sm:flex-row items-center justify-between gap-x-6 gap-y-4">
            <div className="flex-shrink-0 order-1 sm:order-1">
              <img src="/logo.png" alt="Corner System Logo" className="h-28 sm:h-32" /> 
            </div>
            <div className="flex-grow text-center order-3 sm:order-2 my-2 sm:my-0"> 
              <p className="text-2xl sm:text-3xl font-sans text-gray-700 font-semibold">
                Em busca do <span className="text-3xl sm:text-4xl font-bold text-green-700">Green</span>
              </p>
            </div>
            <div className="flex-shrink-0 grid grid-cols-2 sm:grid-cols-4 gap-1.5 sm:gap-2 w-full sm:w-auto order-2 sm:order-3">
              <StatsCard title="Lucro Total" value={`R$ ${stats.totalProfit.toFixed(2).replace('.', ',')}`} icon={profitIcon} bgColor="bg-gray-700" titleColor="text-gray-300" valueColor="text-white" iconColor={profitIconColor} valueSize="text-lg" textSize="text-base"/>
              <StatsCard title="Taxa de Acerto" value={`${stats.winRate.toFixed(1).replace('.', ',')}%`} icon={<BarChart3 />} bgColor="bg-gray-700" titleColor="text-gray-300" valueColor="text-white" iconColor="text-blue-500" valueSize="text-lg" textSize="text-base"/>
              <StatsCard title="ROI" value={`${stats.roi.toFixed(1).replace('.', ',')}%`} icon={<HelpCircle />} bgColor="bg-gray-700" titleColor="text-gray-300" valueColor="text-white" iconColor="text-blue-400" tooltipText={roiTooltipText} valueSize="text-lg" textSize="text-base" iconPosition="top-right"/>
              <div className="flex flex-col space-y-1.5 h-full">
                <StatsCard title="Total de Apostas" value={`${stats.totalBets}`} bgColor="bg-gray-700" titleColor="text-gray-300" valueColor="text-white" textSize="text-xs" valueSize="text-xs"/>
                <StatsCard title="Odd Média" value={`${stats.averageOdd.toFixed(2).replace('.', ',')}`} bgColor="bg-gray-700" titleColor="text-gray-300" valueColor="text-white" textSize="text-xs" valueSize="text-xs"/>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-gray-700 border-b border-gray-600">
        <div className="max-w-full mx-auto px-4">
          <nav className="flex space-x-6 sm:space-x-8 justify-center sm:justify-start">
            <NavLink
              to={dashboardLinkPath}
              end
              className={({ isActive }) =>
                `py-2 sm:py-3 px-2 border-b-2 font-medium text-sm transition-colors ${
                  isActive
                    ? 'border-red-500 text-red-400'
                    : 'border-transparent text-gray-300 hover:text-red-400'
                }`
              }
            >
              Principal
            </NavLink>
            <NavLink
              to={reportsLinkPath}
              className={({ isActive }) =>
                `py-2 sm:py-3 px-2 border-b-2 font-medium text-sm transition-colors ${
                  isActive
                    ? 'border-red-500 text-red-400'
                    : 'border-transparent text-gray-300 hover:text-red-400'
                }`
              }
            >
              Relatórios
            </NavLink>
          </nav>
        </div>
      </div>

      <main className="flex-grow max-w-full mx-auto px-2 sm:px-4 py-4 sm:py-6 w-full">
        <Routes>
          <Route 
            index
            element={
              <Principal 
                stats={stats}
                todayBetsCount={todayBetsCount}
                onShowAddForm={handleOpenAddForm}
                bets={bets}
                onFileUpload={handleFileUpload}
                onEditBet={handleEditBet}
                onDeleteBet={handleDeleteBet}
                isImporting={isLoading}
                importFeedback={importFeedback}
                clearImportFeedback={clearImportFeedback}
                onDeleteBetsByDate={handleDeleteBetsByDate}
                uniqueMarketCategories={uniqueMarketCategories}
              />
            } 
          />
          <Route 
            path={reportsLinkPath}
            element={<ReportsPage allBetsFromTracker={bets} uniqueMarketCategories={uniqueMarketCategories} />}
          />
        </Routes>
      </main>

      <AddBetForm 
        show={showAddForm}
        onClose={() => { setShowAddForm(false); setEditingBet(null); }}
        formData={formData}
        handleInputChange={handleInputChange}
        handleSubmit={handleSubmit}
        timeIntervals={timeIntervals}
        championships={uniqueChampionships}
        calculateProfit={calculateProfit}
        editingBet={editingBet}
      />

      <footer className="bg-gray-800 border-t border-gray-700 py-4 text-gray-400 text-xs mt-auto">
        <div className="max-w-full mx-auto px-4 flex flex-col md:flex-row justify-between items-center gap-y-2">
          <div className="text-center md:text-left space-y-1">
            <p>Developed by: <span className="font-bold text-gray-200">Bruno Costa</span></p>
            <div className="flex items-center justify-center md:justify-start space-x-3 flex-wrap">
              <a href="mailto:costa.developer1@gmail.com" className="flex items-center hover:text-red-400 whitespace-nowrap">
                <Mail size={14} className="mr-1.5" />
                costa.developer1@gmail.com
              </a>
              <span className="text-gray-600 hidden sm:inline">/</span>
              <a href="https://www.instagram.com/costa.developer1" target="_blank" rel="noopener noreferrer" className="flex items-center hover:text-red-400 whitespace-nowrap">
                <Instagram size={14} className="mr-1.5" />
                @costa.developer1
              </a>
              <span className="text-gray-600 hidden sm:inline">/</span>
              <a href="https://twitter.com/costa_developer" target="_blank" rel="noopener noreferrer" className="flex items-center hover:text-red-400 whitespace-nowrap">
                <Twitter size={14} className="mr-1.5" />
                @costa_developer
              </a>
              <span className="text-gray-600 hidden sm:inline">/</span>
              <a href="https://www.linkedin.com/in/costadeveloper1/" target="_blank" rel="noopener noreferrer" className="flex items-center hover:text-red-400 whitespace-nowrap">
                <Linkedin size={14} className="mr-1.5" />
                costadeveloper1
              </a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default BettingTracker;